name: 프로덕션 배포 (master & feat/git-master)

on:
  push:
    branches:
      - master
      - feat/git-master
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: '프로덕션 배포를 확인하시겠습니까?'
        required: true
        default: 'no'
        type: choice
        options:
          - 'no'
          - 'yes'

jobs:
  # 1단계: 배포 전 테스트 (시간 단축)
  pre-deploy-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # 전체 테스트 시간 제한

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ci_test_password
          MYSQL_DATABASE: backendDB
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=6

      redis-cache:
        image: redis:7.2
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=5

      redis-session1:
        image: redis:7.2
        ports:
          - 6380:6379

      redis-session2:
        image: redis:7.2
        ports:
          - 6381:6379

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: -Xms256m -Xmx256m  # 메모리 사용량 감소
        ports:
          - 9200:9200

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Gradle 패키지 캐시
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: gradlew 실행 권한 부여
        run: chmod +x SpringBoot/gradlew

      - name: 서비스 준비 완료 대기 (최적화)
        run: |
          echo "⏳ 테스트 환경 준비 중..."
          
          # 병렬로 서비스 상태 확인
          wait_for_service() {
            local service_name=$1
            local check_cmd=$2
            local max_attempts=$3
          
            for i in $(seq 1 $max_attempts); do
              if eval "$check_cmd" >/dev/null 2>&1; then
                echo "✅ $service_name 준비 완료"
                return 0
              fi
              sleep 2
            done
            echo "❌ $service_name 준비 실패"
            return 1
          }
          
          # 병렬 서비스 체크
          wait_for_service "MySQL" "mysqladmin ping -h127.0.0.1 -P3306 -uroot -pci_test_password --silent" 15 &
          wait_for_service "Redis" "redis-cli -h 127.0.0.1 -p 6379 ping | grep -q PONG" 10 &
          wait_for_service "Elasticsearch" "curl -f http://localhost:9200/_cluster/health" 20 &
          
          # 모든 백그라운드 작업 완료 대기
          wait
          echo "✅ 모든 서비스 준비 완료"

      - name: 테스트용 환경설정 파일 생성
        working-directory: ./SpringBoot
        run: |
          cat > src/main/resources/application-test.properties << 'EOF'
          spring.application.name=News-Deliver
          spring.main.allow-bean-definition-overriding=true
          
          # DB Connection (CI 환경용)
          spring.datasource.url=jdbc:mysql://localhost:3306/backendDB?serverTimezone=Asia/Seoul&characterEncoding=UTF-8&useSSL=false&allowPublicKeyRetrieval=true
          spring.datasource.username=root
          spring.datasource.password=ci_test_password
          spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
          
          # JPA Configuration
          spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
          spring.jpa.hibernate.ddl-auto=create-drop
          spring.jpa.show-sql=false
          spring.jpa.properties.hibernate.format_sql=false
          
          # Redis Configuration
          redis.cache.host=localhost
          redis.cache.port=6379
          redis.session1.host=localhost
          redis.session1.port=6380
          redis.session2.host=localhost
          redis.session2.port=6381
          
          # Elasticsearch
          spring.elasticsearch.uris=http://localhost:9200
          
          # JWT (테스트용)
          jwt.secretKey=test-secret-key-for-ci-cd-pipeline-needs-to-be-at-least-256-bits-long-for-security
          jwt.accessTokenExpirationTime=1800000
          jwt.refreshTokenExpirationTime=86400000
          
          # OAuth2 (테스트용)
          spring.security.oauth2.client.registration.kakao.client-id=test-kakao-client-id
          spring.security.oauth2.client.registration.kakao.client-secret=test-kakao-client-secret
          spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
          spring.security.oauth2.client.registration.kakao.redirect-uri=http://localhost/api/login/oauth2/code/kakao
          spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
          spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
          spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
          spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
          spring.security.oauth2.client.provider.kakao.user-name-attribute=id
          
          # Spring AI (테스트용)
          spring.ai.openai.api-key=test-openai-api-key
          spring.ai.openai.chat.options.model=gpt-3.5-turbo
          
          # DeepSearch API (테스트용)
          deepsearch.api.key=test-deepsearch-api-key
          
          # Batch Job 비활성화 (테스트 시)
          spring.batch.job.enabled=false
          
          # Logging Configuration
          logging.level.org.springframework.web=INFO
          logging.level.org.hibernate.SQL=ERROR
          logging.level.org.hibernate.type.descriptor.sql.BasicBinder=ERROR
          logging.level.com.zaxxer.hikari=ERROR
          
          # Time Zone
          spring.jackson.time-zone=Asia/Seoul
          
          # Forward headers
          server.forward-headers-strategy=framework
          EOF

      - name: 🚨 프로덕션 배포 전 전체 테스트
        working-directory: ./SpringBoot
        env:
          SPRING_PROFILES_ACTIVE: test
        run: |
          echo "🚀 테스트 시작"
          ./gradlew clean build --no-daemon --parallel --build-cache

      - name: 테스트 결과 업로드
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-reports-${{ github.run_number }}
          path: |
            SpringBoot/build/reports/
            SpringBoot/build/test-results/
          retention-days: 7

  # 2단계: 실제 프로덕션 배포 (최적화)
  deploy-production:
    needs: pre-deploy-test
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 15  # 배포 시간 제한
    if: ${{ needs.pre-deploy-test.result == 'success' }}

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: 🚨 프로덕션 배포 확인
        run: |
          echo "🚨🚨🚨 프로덕션 환경에 배포를 시작합니다 🚨🚨🚨"
          echo "브랜치: ${{ github.ref_name }}"
          echo "커밋: ${{ github.sha }}"
          echo "배포 시간: $(date)"

      - name: SSH 키 설정
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 프로덕션 환경변수 파일 생성
        run: |
          cat > .env << 'EOF'
          # Database Configuration
          DB_SERVER=mysql
          DB_PORT=3306
          DB_USER=root
          DB_PASS=${{ secrets.PROD_DB_PASS }}
          
          # Redis Configuration
          REDIS_CACHE_HOST=redis-cache
          REDIS_CACHE_PORT=6379
          REDIS_SESSION1_HOST=redis-session1
          REDIS_SESSION1_PORT=6379
          REDIS_SESSION2_HOST=redis-session2
          REDIS_SESSION2_PORT=6379
          
          # Elasticsearch Configuration
          ELASTICSEARCH_SERVER=elasticsearch
          ELASTICSEARCH_PORT=9200
          
          # JWT Configuration
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          
          # OpenAI Configuration
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          
          # Kakao OAuth Configuration
          KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
          
          # DeepSearch API Configuration
          DEEPSEARCH_API_KEY=${{ secrets.DEEPSEARCH_API_KEY }}
          EOF

      - name: 프로덕션 서버에 배포
        run: |
          # 환경변수 파일을 서버로 전송
          scp -i ~/.ssh/id_rsa .env ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/opt/news-deliver/
          
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
            echo "🚀 프로덕션 배포 시작: $(date)"
            echo "📍 브랜치: ${{ github.ref_name }}"
          
            cd /opt/news-deliver
          
            # 브랜치별 체크아웃 처리
            echo "📥 ${{ github.ref_name }} 브랜치에서 최신 코드 가져오는 중..."
            git fetch origin
          
            if [ "${{ github.ref_name }}" = "master" ]; then
              git checkout master || git checkout -b master origin/master
              git pull origin master
            elif [ "${{ github.ref_name }}" = "feat/git-master" ]; then
              git checkout feat/git-master || git checkout -b feat/git-master origin/feat/git-master
              git pull origin feat/git-master
            fi
          
            # 환경 변수 파일 확인
            if [ ! -f ".env" ]; then
              echo "❌ .env 파일을 찾을 수 없습니다!"
              exit 1
            fi
          
            # 기존 서비스 중지 및 정리
            echo "🛑 기존 서비스 중지 중..."
            docker-compose down --remove-orphans || true
            docker system prune -f || true
          
            # 새로운 컨테이너 시작
            echo "🔄 새 컨테이너 시작 중..."
            docker-compose up -d --build --force-recreate
          
            echo "⏳ 서비스 시작 대기 중..."
            sleep 60
          
            echo "🎉 프로덕션 배포 완료: $(date)"
          '

      - name: 스마트 헬스체크 (올바른 엔드포인트 사용)
        run: |
          echo "🔍 프로덕션 헬스체크 중..."
          
          # 초기 안정화 대기
          echo "⏳ 초기 안정화 대기 중 (60초)..."
          sleep 60
          
          # 올바른 API 엔드포인트로 헬스체크
          success=false
          for i in {1..8}; do
            echo "⏳ 헬스체크 시도 $i/8..."
          
            # /api/auth/status 엔드포인트로 체크 (nginx 설정에 맞춘 경로)
            http_code=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}/api/auth/status || echo "000")
          
            if [ "$http_code" = "200" ]; then
              echo "✅ 프로덕션 헬스체크 통과! (HTTP $http_code)"
              echo "🔗 프로덕션 URL: http://${{ secrets.EC2_HOST }}/api/"
              echo "📋 API 문서: http://${{ secrets.EC2_HOST }}/api/swagger.html"
              success=true
              break
            else
              echo "⚠️  HTTP 응답 코드: $http_code"
          
              # 대체 헬스체크 시도
              if [ $i -eq 4 ]; then
                echo "🔍 대체 엔드포인트로 헬스체크 시도..."
                # Spring Boot Actuator 헬스체크 시도
                alt_http_code=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}/api/actuator/health || echo "000")
                if [ "$alt_http_code" = "200" ]; then
                  echo "✅ 대체 헬스체크 통과! (HTTP $alt_http_code)"
                  success=true
                  break
                fi
              fi
            fi
          
            sleep 20
          done
          
          if [ "$success" = false ]; then
            echo "❌ 프로덕션 헬스체크 실패!"
          
            # 실패 시 디버깅 정보 수집
            echo "🔍 실패 원인 분석 중..."
            ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
              echo "=== 컨테이너 상태 ==="
              docker-compose ps
              echo "=== Spring Boot 로그 (마지막 20줄) ==="
              docker-compose logs --tail=20 springboot
              echo "=== nginx 로그 (마지막 10줄) ==="
              docker-compose logs --tail=10 nginx
            '
            exit 1
          fi

      - name: 배포 후 간단한 모니터링
        if: success()
        run: |
          echo "📊 배포 후 상태 모니터링 (1분간)..."
          
          for i in {1..4}; do
            echo "🔍 모니터링 $i/4..."
            http_code=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}/api/auth/status || echo "000")
          
            if [ "$http_code" = "200" ]; then
              echo "✅ 시점 $i: 서비스 정상 (HTTP $http_code)"
            else
              echo "⚠️  시점 $i: 서비스 이상 (HTTP $http_code)"
            fi
          
            sleep 15
          done
          
          echo "✅ 1분간 모니터링 완료"

      - name: 배포 완료 요약
        if: always()
        run: |
          echo "## 🚀 프로덕션 배포 요약" >> $GITHUB_STEP_SUMMARY
          echo "- **배포 상태**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **환경**: PRODUCTION 🔥" >> $GITHUB_STEP_SUMMARY
          echo "- **배포된 브랜치**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **배포 시간**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **커밋**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **API URL**: http://${{ secrets.EC2_HOST }}/api/" >> $GITHUB_STEP_SUMMARY
          echo "- **API 문서**: http://${{ secrets.EC2_HOST }}/api/swagger.html" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "### ✅ 프로덕션 배포가 성공적으로 완료되었습니다!" >> $GITHUB_STEP_SUMMARY
            echo "- 올바른 API 엔드포인트로 헬스체크 완료" >> $GITHUB_STEP_SUMMARY
            echo "- nginx 프록시 설정에 맞춘 경로 사용" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ 프로덕션 배포가 실패했습니다." >> $GITHUB_STEP_SUMMARY
          fi