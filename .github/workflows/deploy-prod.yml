name: 프로덕션 배포

on:
  push:
    branches: [master, feat/https]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 15

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: 배포
        run: |
          # SSH 키 설정
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

          # 배포 실행
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
            echo "🚀 배포 시작: $(date)"
            cd /opt/news-deliver

            # 코드 업데이트
            git fetch origin && git checkout ${{ github.ref_name }} && git pull origin ${{ github.ref_name }}

            # 환경 설정 확인
            [ ! -f ".env" ] && echo "❌ .env 파일 없음" && exit 1

            # 컨테이너 정리 및 볼륨 보존
            echo "🧹 컨테이너 정리 중..."
            docker-compose down --remove-orphans --timeout 30 || true
            docker container prune -f || true
            docker image prune -f || true
            docker network prune -f || true

            # 필수 볼륨 생성
            echo "🔧 볼륨 생성..."
            docker volume create news-deliver_redis-cache-data 2>/dev/null || true
            docker volume create news-deliver_es-data 2>/dev/null || true
            docker volume create news-deliver_es-plugins 2>/dev/null || true

            # 서비스 시작
            echo "🚀 서비스 시작..."
            docker-compose up -d --build

            # 서비스 준비 대기
            echo "⏳ 서비스 준비 대기..."
            sleep 90

            # Elasticsearch Nori 플러그인 설치
            echo "📦 Nori 플러그인 확인..."
            if ! docker exec elasticsearch bin/elasticsearch-plugin list 2>/dev/null | grep -q "analysis-nori"; then
              echo "설치 중..."
              docker exec elasticsearch bin/elasticsearch-plugin install analysis-nori || true
              docker restart elasticsearch
              sleep 30
            fi

            echo "✅ 배포 완료"
          '

      - name: 헬스체크
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
            echo "🔍 서비스 상태 확인"
            docker ps --format "table {{.Names}}\t{{.Status}}"
          
            echo "💾 볼륨 상태"
            docker volume ls | grep news-deliver || echo "볼륨 없음"
          '

          # HTTPS 헬스체크
          echo "🌐 HTTPS 헬스체크..."
          for i in {1..3}; do
            if curl -f https://api.likelionnews.click/api/hottopic >/dev/null 2>&1; then
              echo "✅ Hot Topic API 정상"
              break
            fi
            echo "시도 $i/3 실패, 15초 대기..."
            sleep 15
          done

      - name: 배포 요약
        if: always()
        run: |
          echo "## 🚀 배포 완료" >> $GITHUB_STEP_SUMMARY
          echo "- **상태**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **시간**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **브랜치**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 서비스 링크" >> $GITHUB_STEP_SUMMARY
          echo "- **API**: https://api.likelionnews.click" >> $GITHUB_STEP_SUMMARY
          echo "- **문서**: https://api.likelionnews.click/swagger.html" >> $GITHUB_STEP_SUMMARY
          echo "- **핫토픽**: https://api.likelionnews.click/api/hottopic" >> $GITHUB_STEP_SUMMARY