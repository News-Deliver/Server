name: 프로덕션 배포 (master & feat/git-master)

on:
  push:
    branches:
      - master
      - feat/git-master
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: '프로덕션 배포를 확인하시겠습니까?'
        required: true
        default: 'no'
        type: choice
        options:
          - 'no'
          - 'yes'

jobs:
  # 1단계: 배포 전 테스트
  pre-deploy-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ci_test_password
          MYSQL_DATABASE: backendDB
        ports:
          - 3306:3306

      redis-cache:
        image: redis:7.2
        ports:
          - 6379:6379

      redis-session1:
        image: redis:7.2
        ports:
          - 6380:6379

      redis-session2:
        image: redis:7.2
        ports:
          - 6381:6379

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: -Xms256m -Xmx256m
        ports:
          - 9200:9200

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Gradle 패키지 캐시
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: gradlew 실행 권한 부여
        run: chmod +x SpringBoot/gradlew

      - name: 서비스 준비 완료 대기
        run: |
          echo "⏳ 테스트 환경 준비 중..."
          wait_for_service() {
            local service_name=$1
            local check_cmd=$2
            local max_attempts=$3
            for i in $(seq 1 $max_attempts); do
              if eval "$check_cmd" >/dev/null 2>&1; then
                echo "✅ $service_name 준비 완료"
                return 0
              fi
              sleep 2
            done
            echo "❌ $service_name 준비 실패"
            return 1
          }
          wait_for_service "MySQL" "mysqladmin ping -h127.0.0.1 -P3306 -uroot -pci_test_password --silent" 15 &
          wait_for_service "Redis" "redis-cli -h 127.0.0.1 -p 6379 ping | grep -q PONG" 10 &
          wait_for_service "Elasticsearch" "curl -f http://localhost:9200/_cluster/health" 20 &
          wait
          echo "✅ 모든 서비스 준비 완료"

      - name: 테스트용 환경설정 파일 생성
        working-directory: ./SpringBoot
        run: |
          cat > src/main/resources/application-test.properties << 'EOF'
          spring.application.name=News-Deliver
          …
          EOF

      - name: 🚨 프로덕션 배포 전 전체 테스트
        working-directory: ./SpringBoot
        env:
          SPRING_PROFILES_ACTIVE: test
        run: |
          echo "🚀 테스트 시작"
          ./gradlew clean build --no-daemon --parallel --build-cache

      - name: 테스트 결과 업로드
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-reports-${{ github.run_number }}
          path: |
            SpringBoot/build/reports/
            SpringBoot/build/test-results/
          retention-days: 7

  # 2단계: 실제 프로덕션 배포
  deploy-production:
    needs: pre-deploy-test
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 15
    if: ${{ needs.pre-deploy-test.result == 'success' }}

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: 🚨 프로덕션 배포 확인
        run: |
          echo "🚨🚨🚨 프로덕션 환경에 배포를 시작합니다 🚨🚨🚨"
          …

      - name: SSH 키 설정
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 프로덕션 환경변수 파일 생성
        run: |
          cat > .env << 'EOF'
          …
          EOF

      - name: 프로덕션 서버에 배포
        run: |
          scp -i ~/.ssh/id_rsa .env ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/opt/news-deliver/
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
            …
          '

      - name: 스마트 헬스체크
        run: |
          echo "🔍 프로덕션 헬스체크 중..."
          …
          # /api/auth/status 엔드포인트로 반복 체크
          …

      - name: 배포 후 간단한 모니터링
        if: success()
        run: |
          echo "📊 배포 후 상태 모니터링 (1분간)..."
          …

      - name: 배포 완료 요약
        if: always()
        run: |
          echo "## 🚀 프로덕션 배포 요약" >> $GITHUB_STEP_SUMMARY
          …
