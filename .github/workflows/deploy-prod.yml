name: 프로덕션 배포 (master 브랜치만)

on:
  push:
    branches: [ master, feat/git-master ]  # feat/git-master 브랜치 추가
  workflow_dispatch:  # 수동 실행 가능
    inputs:
      confirm_deployment:
        description: '프로덕션 배포를 확인하시겠습니까?'
        required: true
        default: 'no'
        type: choice
        options:
          - 'no'
          - 'yes'

jobs:
  # 1단계: 배포 전 테스트
  pre-deploy-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ci_test_password
          MYSQL_DATABASE: backendDB
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

      redis-cache:
        image: redis:7.2
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis-session1:
        image: redis:7.2
        ports:
          - 6380:6379

      redis-session2:
        image: redis:7.2
        ports:
          - 6381:6379

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: -Xms512m -Xmx512m
        ports:
          - 9200:9200

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Gradle 패키지 캐시
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: gradlew 실행 권한 부여
        run: chmod +x SpringBoot/gradlew

      - name: 서비스 준비 완료 대기
        run: |
          echo "⏳ 프로덕션 배포 전 테스트 환경 준비 중..."
          
          # MySQL 대기
          for i in {1..30}; do
            if mysqladmin ping -h"127.0.0.1" -P"3306" -u"root" -p"ci_test_password" --silent; then
              echo "✅ MySQL 준비 완료"
              break
            fi
            sleep 2
          done
          
          # Redis 대기  
          for i in {1..30}; do
            if redis-cli -h 127.0.0.1 -p 6379 ping | grep -q PONG; then
              echo "✅ Redis 준비 완료"
              break
            fi
            sleep 1
          done
          
          # Elasticsearch 대기
          for i in {1..60}; do
            if curl -f http://localhost:9200/_cluster/health >/dev/null 2>&1; then
              echo "✅ Elasticsearch 준비 완료"
              break
            fi
            sleep 2
          done

      - name: 🚨 프로덕션 배포 전 전체 테스트
        working-directory: ./SpringBoot
        env:
          # 테스트 환경 변수 설정 (GitHub Secrets 사용)
          SPRING_PROFILES_ACTIVE: test
          DB_SERVER: localhost
          DB_PORT: 3306
          DB_USER: root
          DB_PASS: ci_test_password
          REDIS_CACHE_HOST: localhost
          REDIS_CACHE_PORT: 6379
          REDIS_SESSION1_HOST: localhost
          REDIS_SESSION1_PORT: 6380
          REDIS_SESSION2_HOST: localhost
          REDIS_SESSION2_PORT: 6381
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          ELASTICSEARCH_SERVER: localhost
          ELASTICSEARCH_PORT: 9200
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
          DEEPSEARCH_API_KEY: ${{ secrets.DEEPSEARCH_API_KEY }}
        run: ./gradlew clean build -x test --no-daemon --stacktrace

      - name: 프로덕션 배포 전 테스트 결과 업로드
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: prod-pre-test-reports-${{ github.run_number }}
          path: |
            SpringBoot/build/reports/
            SpringBoot/build/test-results/
          retention-days: 90

  # 2단계: 실제 프로덕션 배포
  deploy-production:
    needs: pre-deploy-test
    runs-on: ubuntu-latest
    environment: production  # GitHub Environment 보호 설정 필요
    if: ${{ needs.pre-deploy-test.result == 'success' }}

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: 🚨 프로덕션 배포 확인
        run: |
          echo "🚨🚨🚨 프로덕션 환경에 배포를 시작합니다 🚨🚨🚨"
          echo "브랜치: ${{ github.ref_name }}"
          echo "커밋: ${{ github.sha }}"
          echo "배포 시간: $(date)"

      - name: SSH 키 설정
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 프로덕션 서버에 배포
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
            echo "🚀 프로덕션 배포 시작: $(date)"
            echo "📍 브랜치: ${{ github.ref_name }}"
            echo "🔥 PRODUCTION 환경 배포"
          
            cd /opt/news-deliver
          
            # 현재 브랜치 확인
            echo "📋 현재 브랜치: $(git branch --show-current)"
          
            # 현재 브랜치에 맞게 체크아웃 및 풀
            echo "📥 현재 브랜치(${{ github.ref_name }})에서 최신 코드 가져오는 중..."
            git fetch origin
            git checkout ${{ github.ref_name }} || git checkout -b ${{ github.ref_name }} origin/${{ github.ref_name }}
            git pull origin ${{ github.ref_name }}
          
            # 환경 변수 파일 확인
            if [ ! -f ".env" ]; then
              echo "❌ .env 파일을 찾을 수 없습니다!"
              exit 1
            fi
          
            # 기존 컨테이너 중지
            echo "🛑 기존 컨테이너 중지 중..."
            docker-compose down || true
          
            # Docker 이미지 정리
            echo "🧹 오래된 이미지 정리 중..."
            docker system prune -f
          
            # 새로운 컨테이너 시작
            echo "🔄 새 컨테이너 시작 중..."
            docker-compose up -d --build
          
            # 서비스 시작 대기 (프로덕션은 더 오래)
            echo "⏳ 프로덕션 서비스 시작 대기 중..."
            sleep 120
          
            # 서비스 상태 확인
            echo "📊 서비스 상태 확인 중..."
            docker-compose ps
          
            # Spring Boot 헬스체크
            echo "🔍 프로덕션 Spring Boot 헬스체크 중..."
            for i in {1..20}; do
              if curl -f http://localhost:8080/ >/dev/null 2>&1; then
                echo "✅ 프로덕션 Spring Boot가 정상 작동 중입니다!"
                break
              fi
              echo "⏳ 시도 $i/20: Spring Boot가 아직 준비되지 않았습니다..."
              sleep 15
            done
          
            echo "🎉 프로덕션 배포 완료: $(date)"
          '
 

      - name: 프로덕션 외부 헬스체크
        run: |
          echo "🔍 프로덕션 외부 헬스체크 중..."
          sleep 180
          
          # 외부에서 접근 가능한지 확인
          success=false
          for i in {1..15}; do
            if curl -f http://${{ secrets.EC2_HOST }}/ >/dev/null 2>&1; then
              echo "✅ 프로덕션 외부 헬스체크 통과!"
              echo "🔗 프로덕션 URL: http://${{ secrets.EC2_HOST }}/"
              echo "📋 API 문서: http://${{ secrets.EC2_HOST }}/swagger.html"
              success=true
              break
            fi
            echo "⏳ 시도 $i/10: 외부 체크가 아직 준비되지 않았습니다..."
            sleep 30
          done
          
          if [ "$success" = false ]; then
            echo "❌ 프로덕션 헬스체크 실패! 즉시 확인이 필요합니다."
            exit 1
          fi

      - name: 프로덕션 배포 요약
        if: always()
        run: |
          echo "## 🚀 프로덕션 배포 요약" >> $GITHUB_STEP_SUMMARY
          echo "- **배포 상태**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **환경**: PRODUCTION 🔥" >> $GITHUB_STEP_SUMMARY
          echo "- **배포된 브랜치**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **배포 시간**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **커밋**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **프로덕션 URL**: http://${{ secrets.EC2_HOST }}/" >> $GITHUB_STEP_SUMMARY
          echo "- **API 문서**: http://${{ secrets.EC2_HOST }}/swagger.html" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "### ✅ 프로덕션 배포가 성공적으로 완료되었습니다!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ 프로덕션 배포가 실패했습니다. 즉시 확인이 필요합니다!" >> $GITHUB_STEP_SUMMARY
          fi