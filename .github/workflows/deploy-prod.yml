name: 프로덕션 배포 (master & feat/git-master)

on:
  push:
    branches:
      - master
      - feat/git-master  # ✅ feat/git-master 브랜치 추가
  workflow_dispatch:  # 수동 실행 가능
    inputs:
      confirm_deployment:
        description: '프로덕션 배포를 확인하시겠습니까?'
        required: true
        default: 'no'
        type: choice
        options:
          - 'no'
          - 'yes'

jobs:
  # 1단계: 배포 전 테스트
  pre-deploy-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ci_test_password
          MYSQL_DATABASE: backendDB
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

      redis-cache:
        image: redis:7.2
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis-session1:
        image: redis:7.2
        ports:
          - 6380:6379

      redis-session2:
        image: redis:7.2
        ports:
          - 6381:6379

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: -Xms512m -Xmx512m
        ports:
          - 9200:9200

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Gradle 패키지 캐시
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: gradlew 실행 권한 부여
        run: chmod +x SpringBoot/gradlew

      - name: 서비스 준비 완료 대기
        run: |
          echo "⏳ 프로덕션 배포 전 테스트 환경 준비 중..."
          
          # MySQL 대기
          for i in {1..30}; do
            if mysqladmin ping -h"127.0.0.1" -P"3306" -u"root" -p"ci_test_password" --silent; then
              echo "✅ MySQL 준비 완료"
              break
            fi
            sleep 2
          done
          
          # Redis 대기  
          for i in {1..30}; do
            if redis-cli -h 127.0.0.1 -p 6379 ping | grep -q PONG; then
              echo "✅ Redis 준비 완료"
              break
            fi
            sleep 1
          done
          
          # Elasticsearch 대기
          for i in {1..60}; do
            if curl -f http://localhost:9200/_cluster/health >/dev/null 2>&1; then
              echo "✅ Elasticsearch 준비 완료"
              break
            fi
            sleep 2
          done

      # ✅ 테스트용 application-test.properties 생성
      - name: 테스트용 환경설정 파일 생성
        working-directory: ./SpringBoot
        run: |
          # 기존 application-test.properties 백업
          if [ -f "src/main/resources/application-test.properties" ]; then
            cp src/main/resources/application-test.properties src/main/resources/application-test.properties.bak
          fi
          
          # GitHub Actions용 테스트 설정 파일 생성
          cat > src/main/resources/application-test.properties << EOF
          spring.application.name=News-Deliver
          spring.main.allow-bean-definition-overriding=true
          
          # Profile Active
          spring.profiles.active=test
          
          # DB Connection (CI 환경용)
          spring.datasource.url=jdbc:mysql://localhost:3306/backendDB?serverTimezone=Asia/Seoul&characterEncoding=UTF-8&useSSL=false&allowPublicKeyRetrieval=true
          spring.datasource.username=root
          spring.datasource.password=ci_test_password
          spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
          
          # JPA Configuration
          spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
          spring.jpa.hibernate.ddl-auto=create-drop
          spring.jpa.show-sql=false
          spring.jpa.properties.hibernate.format_sql=false
          
          # Redis Configuration
          redis.cache.host=localhost
          redis.cache.port=6379
          redis.session1.host=localhost
          redis.session1.port=6380
          redis.session2.host=localhost
          redis.session2.port=6381
          
          # Elasticsearch
          spring.elasticsearch.uris=http://localhost:9200
          
          # JWT (테스트용 더미 값)
          jwt.secretKey=test-secret-key-for-ci-cd-pipeline-needs-to-be-at-least-256-bits-long-for-security
          jwt.accessTokenExpirationTime=1800000
          jwt.refreshTokenExpirationTime=86400000
          
          # OAuth2 (테스트용 더미 값)
          spring.security.oauth2.client.registration.kakao.client-id=test-kakao-client-id
          spring.security.oauth2.client.registration.kakao.client-secret=test-kakao-client-secret
          spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
          spring.security.oauth2.client.registration.kakao.redirect-uri=http://localhost/api/login/oauth2/code/kakao
          spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
          spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
          spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
          spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
          spring.security.oauth2.client.provider.kakao.user-name-attribute=id
          
          # Spring AI (테스트용 더미 값)
          spring.ai.openai.api-key=test-openai-api-key
          spring.ai.openai.chat.options.model=gpt-3.5-turbo
          
          # DeepSearch API (테스트용 더미 값)
          deepsearch.api.key=test-deepsearch-api-key
          
          # Batch Job 비활성화 (테스트 시)
          spring.batch.job.enabled=false
          
          # Logging Configuration
          logging.level.org.springframework.web=INFO
          logging.level.org.hibernate.SQL=ERROR
          logging.level.org.hibernate.type.descriptor.sql.BasicBinder=ERROR
          logging.level.com.zaxxer.hikari=ERROR
          
          # Time Zone
          spring.jackson.time-zone=Asia/Seoul
          
          # Forward headers
          server.forward-headers-strategy=framework
          EOF
          
          echo "✅ 테스트용 application-test.properties 파일 생성 완료"

      - name: 🚨 프로덕션 배포 전 전체 테스트
        working-directory: ./SpringBoot
        env:
          # Spring 프로파일 명시적 설정
          SPRING_PROFILES_ACTIVE: test
        run: |
          echo "🔍 테스트 실행 전 환경 확인"
          echo "SPRING_PROFILES_ACTIVE: $SPRING_PROFILES_ACTIVE"
          echo "Java 버전: $(java -version 2>&1 | head -1)"
          echo "현재 디렉토리: $(pwd)"
          echo "application-test.properties 존재 여부: $(ls -la src/main/resources/application*test* || echo '파일 없음')"
          
          echo "🚀 테스트 시작"
          ./gradlew clean build --no-daemon --info

      - name: 프로덕션 배포 전 테스트 결과 업로드
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: prod-pre-test-reports-${{ github.run_number }}
          path: |
            SpringBoot/build/reports/
            SpringBoot/build/test-results/
          retention-days: 90

  # 2단계: 실제 프로덕션 배포
  deploy-production:
    needs: pre-deploy-test
    runs-on: ubuntu-latest
    environment: production  # GitHub Environment 보호 설정 필요
    if: ${{ needs.pre-deploy-test.result == 'success' }}

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: 🚨 프로덕션 배포 확인
        run: |
          echo "🚨🚨🚨 프로덕션 환경에 배포를 시작합니다 🚨🚨🚨"
          echo "브랜치: ${{ github.ref_name }}"
          echo "커밋: ${{ github.sha }}"
          echo "배포 시간: $(date)"
          
          # ✅ feat/git-master 브랜치인 경우 특별 표시
          if [ "${{ github.ref_name }}" = "feat/git-master" ]; then
            echo "⚠️  [개발 브랜치 배포] feat/git-master에서 프로덕션 배포 중"
          fi

      - name: SSH 키 설정
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # ✅ 환경변수 파일 생성 단계 추가
      - name: 프로덕션 환경변수 파일 생성
        run: |
          cat > .env << EOF
          # Database Configuration
          DB_SERVER=mysql
          DB_PORT=3306
          DB_USER=root
          DB_PASS=${{ secrets.PROD_DB_PASS }}
          
          # Redis Configuration
          REDIS_CACHE_HOST=redis-cache
          REDIS_CACHE_PORT=6379
          REDIS_SESSION1_HOST=redis-session1
          REDIS_SESSION1_PORT=6379
          REDIS_SESSION2_HOST=redis-session2
          REDIS_SESSION2_PORT=6379
          
          # Elasticsearch Configuration
          ELASTICSEARCH_SERVER=elasticsearch
          ELASTICSEARCH_PORT=9200
          
          # JWT Configuration
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          
          # OpenAI Configuration
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          
          # Kakao OAuth Configuration
          KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
          
          # DeepSearch API Configuration
          DEEPSEARCH_API_KEY=${{ secrets.DEEPSEARCH_API_KEY }}
          EOF

      - name: 프로덕션 서버에 배포
        run: |
          # 환경변수 파일을 서버로 전송
          scp -i ~/.ssh/id_rsa .env ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/opt/news-deliver/
          
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
            echo "🚀 프로덕션 배포 시작: $(date)"
            echo "📍 브랜치: ${{ github.ref_name }}"
            echo "🔥 PRODUCTION 환경 배포"
          
            cd /opt/news-deliver
          
            # ✅ 현재 브랜치에 따른 체크아웃 로직
            echo "📋 현재 브랜치: $(git branch --show-current)"
            echo "📥 ${{ github.ref_name }} 브랜치에서 최신 코드 가져오는 중..."
          
            git fetch origin
          
            # 브랜치별 체크아웃 처리
            if [ "${{ github.ref_name }}" = "master" ]; then
              git checkout master || git checkout -b master origin/master
              git pull origin master
              echo "✅ master 브랜치 코드 업데이트 완료"
            elif [ "${{ github.ref_name }}" = "feat/git-master" ]; then
              git checkout feat/git-master || git checkout -b feat/git-master origin/feat/git-master
              git pull origin feat/git-master
              echo "✅ feat/git-master 브랜치 코드 업데이트 완료"
            else
              echo "❌ 지원하지 않는 브랜치: ${{ github.ref_name }}"
              exit 1
            fi
          
            # 환경 변수 파일 확인
            if [ ! -f ".env" ]; then
              echo "❌ .env 파일을 찾을 수 없습니다!"
              exit 1
            fi
          
            echo "✅ .env 파일 확인됨"
          
            # ✅ 기존 컨테이너 완전 정리
            echo "🛑 기존 서비스 완전 중지 중..."
            docker-compose down --volumes --remove-orphans || true
          
            # ✅ 좀비 프로세스 정리
            echo "🧹 좀비 프로세스 정리 중..."
            docker container prune -f
            docker volume prune -f
            docker network prune -f
            docker image prune -f
          
            # ✅ 네트워크 및 포트 확인
            echo "🔍 포트 사용 상태 확인 중..."
            netstat -tulpn | grep -E ":(80|8080|3306|6379|6380|6381|9200)" || echo "포트 사용 중인 프로세스 없음"
          
            # ✅ 새로운 컨테이너 시작 (더 긴 타임아웃)
            echo "🔄 새 컨테이너 시작 중..."
            docker-compose up -d --build --force-recreate
          
            # ✅ 각 서비스별 개별 헬스체크
            echo "⏳ 프로덕션 서비스별 헬스체크 시작..."
          
            # MySQL 헬스체크
            echo "🔍 MySQL 헬스체크 중..."
            for i in {1..30}; do
              if docker-compose exec -T mysql mysqladmin ping -h localhost --silent; then
                echo "✅ MySQL 준비 완료!"
                break
              fi
              echo "⏳ MySQL 대기 중... $i/30"
              sleep 10
            done
          
            # Redis 헬스체크
            echo "🔍 Redis 헬스체크 중..."
            for i in {1..20}; do
              if docker-compose exec -T redis-cache redis-cli ping | grep -q PONG; then
                echo "✅ Redis 준비 완료!"
                break
              fi
              echo "⏳ Redis 대기 중... $i/20"
              sleep 5
            done
          
            # Elasticsearch 헬스체크
            echo "🔍 Elasticsearch 헬스체크 중..."
            for i in {1..40}; do
              if curl -f http://localhost:9200/_cluster/health >/dev/null 2>&1; then
                echo "✅ Elasticsearch 준비 완료!"
                break
              fi
              echo "⏳ Elasticsearch 대기 중... $i/40"
              sleep 10
            done
          
            # ✅ Spring Boot 헬스체크 (더 긴 타임아웃)
            echo "🔍 Spring Boot 헬스체크 중..."
            for i in {1..60}; do
              if curl -f http://localhost:8080/ >/dev/null 2>&1; then
                echo "✅ Spring Boot가 정상 작동 중입니다!"
                break
              fi
              echo "⏳ 시도 $i/60: Spring Boot가 아직 준비되지 않았습니다..."
              sleep 15
            done
          
            # ✅ 최종 서비스 상태 확인
            echo "📊 최종 서비스 상태 확인..."
            docker-compose ps
          
            # ✅ 상세 로그 확인
            echo "📋 Spring Boot 컨테이너 로그 (마지막 50줄):"
            docker-compose logs --tail=50 springboot || echo "Spring Boot 로그 가져오기 실패"
          
            echo "🎉 프로덕션 배포 완료: $(date)"
          '

      # ✅ 개선된 외부 헬스체크
      - name: 프로덕션 외부 헬스체크
        run: |
          echo "🔍 프로덕션 외부 헬스체크 중..."
          
          # ✅ 더 긴 초기 대기 시간
          echo "⏳ 초기 안정화 대기 중 (3분)..."
          sleep 180
          
          # ✅ EC2 보안그룹 및 nginx 상태 확인
          echo "🔍 EC2 인스턴스 기본 연결 테스트..."
          if ! nc -z ${{ secrets.EC2_HOST }} 80; then
            echo "❌ EC2 포트 80에 연결할 수 없습니다. 보안그룹 설정을 확인하세요."
          
            # SSH로 내부 상태 확인
            ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
              echo "🔍 내부 서비스 상태 확인:"
              echo "=== Docker 컨테이너 상태 ==="
              docker ps
              echo "=== 포트 바인딩 상태 ==="
              netstat -tulpn | grep -E ":(80|8080)"
              echo "=== nginx 상태 ==="
              docker-compose logs --tail=20 nginx || echo "nginx 로그 없음"
              echo "=== Spring Boot 상태 ==="
              docker-compose logs --tail=20 springboot || echo "Spring Boot 로그 없음"
            '
            exit 1
          fi
          
          # ✅ 실제 HTTP 헬스체크
          success=false
          for i in {1..20}; do
            echo "⏳ 외부 헬스체크 시도 $i/20..."
          
            # HTTP 응답 코드 확인
            http_code=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}/ || echo "000")
          
            if [ "$http_code" = "200" ]; then
              echo "✅ 프로덕션 외부 헬스체크 통과! (HTTP $http_code)"
              echo "🔗 프로덕션 URL: http://${{ secrets.EC2_HOST }}/"
              echo "📋 API 문서: http://${{ secrets.EC2_HOST }}/swagger.html"
              success=true
              break
            else
              echo "⚠️  HTTP 응답 코드: $http_code"
          
              # 상세 디버그 정보 (5번째 시도마다)
              if [ $((i % 5)) -eq 0 ]; then
                echo "🔍 상세 연결 상태 확인 중..."
                curl -v http://${{ secrets.EC2_HOST }}/ || true
              fi
            fi
          
            sleep 30
          done
          
          if [ "$success" = false ]; then
            echo "❌ 프로덕션 헬스체크 실패! 즉시 확인이 필요합니다."
          
            # ✅ 실패 시 상세 디버그 정보 수집
            echo "🔍 실패 원인 분석을 위한 정보 수집 중..."
            ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
              echo "=== 시스템 리소스 상태 ==="
              df -h
              free -h
              echo "=== 모든 컨테이너 상태 ==="
              docker ps -a
              echo "=== 컨테이너별 로그 (마지막 30줄) ==="
              for container in $(docker ps -q); do
                echo "--- $(docker ps --format "table {{.Names}}" | grep -v NAMES | head -1) 로그 ---"
                docker logs --tail=30 $container 2>&1 || echo "로그 없음"
              done
            '
            exit 1
          fi

      # ✅ 배포 후 상세 모니터링
      - name: 배포 후 상태 모니터링
        if: success()
        run: |
          echo "📊 배포 후 상태 모니터링 (5분간)..."
          
          for i in {1..10}; do
            echo "🔍 모니터링 $i/10..."
          
            # HTTP 상태 확인
            http_code=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}/ || echo "000")
          
            if [ "$http_code" = "200" ]; then
              echo "✅ 시점 $i: 서비스 정상 (HTTP $http_code)"
            else
              echo "⚠️  시점 $i: 서비스 이상 (HTTP $http_code)"
            fi
          
            sleep 30
          done
          
          echo "✅ 5분간