name: 프로덕션 배포 (개선된 디버깅)

on:
  push:
    branches:
      - master
      - feat/git-master
  workflow_dispatch:

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 25

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: SSH 키 설정
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 프로덕션 서버에 배포
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
            echo "🚀 프로덕션 배포 시작: $(date)"
          
            cd /opt/news-deliver
          
            # 최신 코드 가져오기
            git fetch origin
            git checkout ${{ github.ref_name }} || git checkout -b ${{ github.ref_name }} origin/${{ github.ref_name }}
            git pull origin ${{ github.ref_name }}
          
            # 환경 변수 파일 확인
            if [ ! -f ".env" ]; then
              echo "❌ .env 파일을 찾을 수 없습니다!"
              exit 1
            fi
          
            # 기존 컨테이너 정리
            docker-compose down --remove-orphans --timeout 30 || true
            docker system prune -f || true
          
            # 새 컨테이너 시작
            docker-compose up -d --build --force-recreate
          
            echo "⏳ 컨테이너 시작 대기 (90초)..."
            sleep 90
          
            echo "🎉 배포 스크립트 완료"
          '

      - name: 고급 디버깅 정보 수집
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
            echo "🔍 고급 디버깅 정보 수집 시작"
            cd /opt/news-deliver
          
            echo "=== 현재 작업 디렉토리 ==="
            pwd
            ls -la
          
            echo "=== Docker 데몬 상태 ==="
            sudo systemctl status docker --no-pager || echo "Docker 상태 확인 실패"
          
            echo "=== 모든 Docker 컨테이너 (실행 중 + 중지됨) ==="
            docker ps -a
          
            echo "=== Docker 이미지 목록 ==="
            docker images
          
            echo "=== Docker Compose 설정 검증 ==="
            docker-compose config || echo "docker-compose.yml 설정 오류"
          
            echo "=== 직접 Docker 컨테이너 확인 ==="
            docker ps --filter "name=springboot" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
            echo "=== Spring Boot 컨테이너 로그 (직접 docker 명령어) ==="
            SPRINGBOOT_CONTAINER=$(docker ps -q --filter "name=springboot")
            if [ ! -z "$SPRINGBOOT_CONTAINER" ]; then
              echo "Spring Boot 컨테이너 ID: $SPRINGBOOT_CONTAINER"
              docker logs $SPRINGBOOT_CONTAINER --tail=50
            else
              echo "Spring Boot 컨테이너가 실행 중이 아닙니다"
            fi
          
            echo "=== 모든 컨테이너 로그 (최근 10줄씩) ==="
            for container in $(docker ps --format "{{.Names}}"); do
              echo "--- $container 로그 ---"
              docker logs $container --tail=10 2>/dev/null || echo "$container 로그 가져오기 실패"
            done
          
            echo "=== 포트 사용 상태 (ss 명령어) ==="
            ss -tulpn | grep -E ":(80|8080|3306|6379|9200)" || echo "해당 포트들이 사용 중이 아닙니다"
          
            echo "=== 네트워크 인터페이스 ==="
            ip addr show
          
            echo "=== 호스트에서 직접 포트 테스트 ==="
            echo "80번 포트 테스트:"
            curl -I http://localhost:80/api/auth/status 2>/dev/null || echo "80번 포트 연결 실패"
          
            echo "=== Docker 네트워크 정보 ==="
            docker network ls
            docker network inspect news-deliver_backend 2>/dev/null || echo "백엔드 네트워크 정보 없음"
          
            echo "=== 시스템 리소스 ==="
            echo "메모리:"
            free -h
            echo "디스크:"
            df -h
            echo "CPU:"
            top -bn1 | head -5
          
            echo "🔍 고급 디버깅 정보 수집 완료"
          '

      - name: 컨테이너별 개별 테스트
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
            echo "🧪 컨테이너별 개별 테스트 시작"
            cd /opt/news-deliver
          
            echo "=== MySQL 컨테이너 테스트 ==="
            MYSQL_CONTAINER=$(docker ps -q --filter "name=mysql")
            if [ ! -z "$MYSQL_CONTAINER" ]; then
              echo "MySQL 상태 확인:"
              docker exec $MYSQL_CONTAINER mysqladmin ping -h localhost -u root -p$(grep DB_PASS .env | cut -d= -f2) || echo "MySQL 연결 실패"
            else
              echo "MySQL 컨테이너가 실행 중이 아닙니다"
            fi
          
            echo "=== Redis 컨테이너 테스트 ==="
            REDIS_CONTAINER=$(docker ps -q --filter "name=redis-cache")
            if [ ! -z "$REDIS_CONTAINER" ]; then
              echo "Redis 상태 확인:"
              docker exec $REDIS_CONTAINER redis-cli ping || echo "Redis 연결 실패"
            else
              echo "Redis 컨테이너가 실행 중이 아닙니다"
            fi
          
            echo "=== Elasticsearch 컨테이너 테스트 ==="
            ES_CONTAINER=$(docker ps -q --filter "name=elasticsearch")
            if [ ! -z "$ES_CONTAINER" ]; then
              echo "Elasticsearch 상태 확인:"
              docker exec $ES_CONTAINER curl -f http://localhost:9200/_cluster/health || echo "Elasticsearch 연결 실패"
            else
              echo "Elasticsearch 컨테이너가 실행 중이 아닙니다"
            fi
          
            echo "=== Spring Boot 컨테이너 직접 테스트 ==="
            SPRINGBOOT_CONTAINER=$(docker ps -q --filter "name=springboot")
            if [ ! -z "$SPRINGBOOT_CONTAINER" ]; then
              echo "Spring Boot 컨테이너 내부 프로세스:"
              docker exec $SPRINGBOOT_CONTAINER ps aux || echo "프로세스 확인 실패"
          
              echo "Spring Boot 컨테이너 네트워크 확인:"
              docker exec $SPRINGBOOT_CONTAINER netstat -tulpn 2>/dev/null || docker exec $SPRINGBOOT_CONTAINER ss -tulpn || echo "네트워크 상태 확인 실패"
          
              echo "Spring Boot 내부에서 자가 테스트:"
              docker exec $SPRINGBOOT_CONTAINER curl -f http://localhost:8080/api/auth/status || echo "내부 자가 테스트 실패"
            else
              echo "Spring Boot 컨테이너가 실행 중이 아닙니다"
            fi
          
            echo "🧪 컨테이너별 개별 테스트 완료"
          '

      - name: 최종 헬스체크
        run: |
          echo "🎯 최종 외부 헬스체크..."
          
          success=false
          
          for attempt in {1..5}; do
            echo "🔄 시도 $attempt/5"
          
            # 다양한 엔드포인트 테스트
            endpoints=("/api/auth/status" "/health" "/swagger.html")
          
            for endpoint in "${endpoints[@]}"; do
              url="http://${{ secrets.EC2_HOST }}${endpoint}"
              echo "  📡 테스트: $url"
          
              response=$(curl -s -o /dev/null -w "%{http_code}:%{time_total}" --connect-timeout 5 --max-time 10 "$url" || echo "000:0")
              http_code=$(echo $response | cut -d: -f1)
              time_total=$(echo $response | cut -d: -f2)
          
              echo "  📊 응답: 코드=$http_code, 시간=${time_total}s"
          
              if [ "$http_code" = "200" ]; then
                echo "  ✅ $endpoint 성공!"
                success=true
                break 2
              elif [ "$http_code" = "404" ] && [ "$endpoint" = "/health" ]; then
                echo "  ⚠️ $endpoint 404 (아직 구현 안됨)"
              else
                echo "  ❌ $endpoint 실패"
              fi
            done
          
            if [ $attempt -lt 5 ]; then
              echo "  ⏳ 15초 대기..."
              sleep 15
            fi
          done
          
          if [ "$success" = true ]; then
            echo "🎉 배포 성공!"
            echo "🔗 서비스 URL: http://${{ secrets.EC2_HOST }}/"
            echo "📋 API 문서: http://${{ secrets.EC2_HOST }}/swagger.html"
            echo "🩺 상태 확인: http://${{ secrets.EC2_HOST }}/api/auth/status"
          else
            echo "⚠️ 외부 헬스체크 실패했지만 서비스는 실행 중일 수 있습니다"
            echo "🔗 직접 확인: http://${{ secrets.EC2_HOST }}/"
          fi

      - name: 배포 요약
        if: always()
        run: |
          echo "## 🚀 배포 요약" >> $GITHUB_STEP_SUMMARY
          echo "- **상태**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **시간**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **브랜치**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 링크들:" >> $GITHUB_STEP_SUMMARY
          echo "- **메인 서비스**: http://${{ secrets.EC2_HOST }}/" >> $GITHUB_STEP_SUMMARY
          echo "- **API 문서**: http://${{ secrets.EC2_HOST }}/swagger.html" >> $GITHUB_STEP_SUMMARY
          echo "- **상태 확인**: http://${{ secrets.EC2_HOST }}/api/auth/status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛠 문제 해결:" >> $GITHUB_STEP_SUMMARY
          echo "1. \`ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}\`" >> $GITHUB_STEP_SUMMARY
          echo "2. \`cd /opt/news-deliver && docker ps\`" >> $GITHUB_STEP_SUMMARY
          echo "3. \`docker logs springboot\` (컨테이너명 확인 후)" >> $GITHUB_STEP_SUMMARY