name: 프로덕션 배포 (HTTPS 대응)

on:
  push:
    branches:
      - master
      - feat/https
  workflow_dispatch:

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 25

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: SSH 키 설정
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 프로덕션 서버에 배포
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
            echo "🚀 프로덕션 배포 시작: $(date)"
          
            cd /opt/news-deliver
          
            # 최신 코드 가져오기
            git fetch origin
            git checkout ${{ github.ref_name }} || git checkout -b ${{ github.ref_name }} origin/${{ github.ref_name }}
            git pull origin ${{ github.ref_name }}
          
            # 환경 변수 파일 확인
            if [ ! -f ".env" ]; then
              echo "❌ .env 파일을 찾을 수 없습니다!"
              exit 1
            fi
          
            # 기존 컨테이너 정리
            docker-compose down --remove-orphans --timeout 30 || true
            docker system prune -f || true
          
            # 새 컨테이너 시작
            docker-compose up -d --build --force-recreate
          
            echo "⏳ 컨테이너 시작 대기 (90초)..."
            sleep 90
          
            echo "🎉 배포 스크립트 완료"
          '

      - name: 컨테이너 상태 확인
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
            echo "🔍 컨테이너 상태 확인"
            cd /opt/news-deliver
          
            echo "=== Docker 컨테이너 상태 ==="
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
            echo "=== Spring Boot 컨테이너 로그 (최근 30줄) ==="
            SPRINGBOOT_CONTAINER=$(docker ps -q --filter "name=springboot")
            if [ ! -z "$SPRINGBOOT_CONTAINER" ]; then
              docker logs $SPRINGBOOT_CONTAINER --tail=30
            else
              echo "❌ Spring Boot 컨테이너가 실행 중이 아닙니다"
            fi
          
            echo "=== 주요 서비스 상태 확인 ==="
            # MySQL 확인
            if docker ps | grep -q mysql; then
              echo "✅ MySQL 컨테이너 실행 중"
            else
              echo "❌ MySQL 컨테이너 없음"
            fi
          
            # Redis 확인  
            if docker ps | grep -q redis; then
              echo "✅ Redis 컨테이너 실행 중"
            else
              echo "❌ Redis 컨테이너 없음"
            fi
          
            # Elasticsearch 확인
            if docker ps | grep -q elasticsearch; then
              echo "✅ Elasticsearch 컨테이너 실행 중"
            else
              echo "❌ Elasticsearch 컨테이너 없음"
            fi
          '

      - name: 내부 헬스체크
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
            echo "🏥 내부 헬스체크 시작"
          
            # Spring Boot 컨테이너 내부에서 자가 테스트
            SPRINGBOOT_CONTAINER=$(docker ps -q --filter "name=springboot")
            if [ ! -z "$SPRINGBOOT_CONTAINER" ]; then
              echo "Spring Boot 내부 헬스체크:"
              docker exec $SPRINGBOOT_CONTAINER curl -f http://localhost:8080/api/auth/status 2>/dev/null && echo "✅ 내부 API 정상" || echo "❌ 내부 API 실패"
            fi
          
            # 호스트에서 컨테이너로 접근 테스트
            echo "호스트에서 컨테이너 접근 테스트:"
            curl -f http://localhost:8080/api/auth/status 2>/dev/null && echo "✅ 호스트->컨테이너 정상" || echo "❌ 호스트->컨테이너 실패"
          '

      - name: 최종 HTTPS 헬스체크
        run: |
          echo "🎯 HTTPS 도메인 헬스체크..."
          
          success=false
          api_domain="https://api.likelionnews.click"
          
          for attempt in {1..5}; do
            echo "🔄 시도 $attempt/5"
          
            # HTTPS 도메인으로 테스트
            endpoints=("/api/auth/status" "/swagger.html")
          
            for endpoint in "${endpoints[@]}"; do
              url="${api_domain}${endpoint}"
              echo "  📡 테스트: $url"
          
              response=$(curl -s -o /dev/null -w "%{http_code}:%{time_total}" --connect-timeout 10 --max-time 20 "$url" || echo "000:0")
              http_code=$(echo $response | cut -d: -f1)
              time_total=$(echo $response | cut -d: -f2)
          
              echo "  📊 응답: 코드=$http_code, 시간=${time_total}s"
          
              if [ "$http_code" = "200" ]; then
                echo "  ✅ $endpoint 성공!"
                success=true
                break 2
              elif [ "$http_code" = "404" ]; then
                echo "  ⚠️ $endpoint 404 (엔드포인트가 없을 수 있음)"
              elif [ "$http_code" = "000" ]; then
                echo "  ❌ $endpoint 연결 실패 (DNS/ALB 문제 가능성)"
              else
                echo "  ❌ $endpoint HTTP $http_code 오류"
              fi
            done
          
            if [ $attempt -lt 5 ]; then
              echo "  ⏳ 15초 대기..."
              sleep 15
            fi
          done
          
          if [ "$success" = true ]; then
            echo "🎉 HTTPS 배포 성공!"
            echo "🔗 API 서비스: https://api.likelionnews.click"
            echo "📋 API 문서: https://api.likelionnews.click/swagger.html"
            echo "🩺 상태 확인: https://api.likelionnews.click/api/auth/status"
          else
            echo "⚠️ HTTPS 헬스체크 실패"
            echo "🔧 확인사항:"
            echo "  - Route53에서 api.likelionnews.click이 ALB를 가리키는지 확인"
            echo "  - ALB에 SSL 인증서가 정상 연결되었는지 확인"
            echo "  - ALB Target Group이 healthy 상태인지 확인"
            echo "  - EC2 Security Group에서 ALB → EC2:8080 허용되었는지 확인"
          fi

      - name: 배포 요약
        if: always()
        run: |
          echo "## 🚀 HTTPS 배포 요약" >> $GITHUB_STEP_SUMMARY
          echo "- **상태**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **시간**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **브랜치**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 HTTPS 링크들:" >> $GITHUB_STEP_SUMMARY
          echo "- **API 서비스**: https://api.likelionnews.click" >> $GITHUB_STEP_SUMMARY
          echo "- **API 문서**: https://api.likelionnews.click/swagger.html" >> $GITHUB_STEP_SUMMARY
          echo "- **상태 확인**: https://api.likelionnews.click/api/auth/status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛠 문제 해결:" >> $GITHUB_STEP_SUMMARY
          echo "1. \`ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}\`" >> $GITHUB_STEP_SUMMARY
          echo "2. \`cd /opt/news-deliver && docker ps\`" >> $GITHUB_STEP_SUMMARY
          echo "3. \`docker logs springboot\` (컨테이너명 확인 후)" >> $GITHUB_STEP_SUMMARY
          echo "4. ALB와 Route53 설정 확인" >> $GITHUB_STEP_SUMMARY