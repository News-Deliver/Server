name: 프로덕션 배포 (master & feat/git-master)

on:
  push:
    branches:
      - master
      - feat/git-master
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: '프로덕션 배포를 확인하시겠습니까?'
        required: true
        default: 'no'
        type: choice
        options:
          - 'no'
          - 'yes'

jobs:
  pre-deploy-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      redis-cache:
        image: redis:7.2
        ports:
          - 6379:6379

      redis-session1:
        image: redis:7.2
        ports:
          - 6380:6379

      redis-session2:
        image: redis:7.2
        ports:
          - 6381:6379

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: -Xms256m -Xmx256m
        ports:
          - 9200:9200

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Gradle 패키지 캐시
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: gradlew 실행 권한 부여
        run: chmod +x SpringBoot/gradlew

      - name: redis-cli 설치
        run: sudo apt-get update && sudo apt-get install -y redis-tools

      - name: 서비스 준비 완료 대기
        run: |
          echo "⏳ 테스트 환경 준비 중..."
          wait_for_service() {
            local service_name=$1
            local check_cmd=$2
            local max_attempts=$3
            for i in $(seq 1 $max_attempts); do
              if eval "$check_cmd" >/dev/null 2>&1; then
                echo "✅ $service_name 준비 완료"
                return 0
              fi
              sleep 2
            done
            echo "❌ $service_name 준비 실패"
            return 1
          }
          wait_for_service "Redis" "redis-cli -h 127.0.0.1 -p 6379 ping | grep -q PONG" 10 &
          wait_for_service "Elasticsearch" "curl -f http://localhost:9200/_cluster/health" 20 &
          wait
          echo "✅ 모든 서비스 준비 완료"

      - name: 테스트용 환경설정 파일 생성
        working-directory: ./SpringBoot
        run: |
          cat > src/main/resources/application-test.properties << 'EOF'
          spring.application.name=News-Deliver
          spring.main.allow-bean-definition-overriding=true

          # DB: H2로 설정
          spring.datasource.url=jdbc:h2:mem:testdb
          spring.datasource.driver-class-name=org.h2.Driver
          spring.datasource.username=sa
          spring.datasource.password=
          spring.jpa.hibernate.ddl-auto=create-drop
          spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

          # Redis
          redis.cache.host=localhost
          redis.cache.port=6379
          redis.session1.host=localhost
          redis.session1.port=6380
          redis.session2.host=localhost
          redis.session2.port=6381

          # Elasticsearch
          spring.elasticsearch.uris=http://localhost:9200

          # JWT
          jwt.secretKey=test-secret-key-for-ci
          jwt.accessTokenExpirationTime=1800000
          jwt.refreshTokenExpirationTime=86400000

          # OAuth2
          spring.security.oauth2.client.registration.kakao.client-id=test-kakao-client-id
          spring.security.oauth2.client.registration.kakao.client-secret=test-kakao-client-secret
          spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
          spring.security.oauth2.client.registration.kakao.redirect-uri=http://localhost/api/login/oauth2/code/kakao
          spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
          spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
          spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
          spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
          spring.security.oauth2.client.provider.kakao.user-name-attribute=id

          # Spring AI
          spring.ai.openai.api-key=test-openai-api-key
          spring.ai.openai.chat.options.model=gpt-3.5-turbo

          # DeepSearch API
          deepsearch.api.key=test-deepsearch-api-key

          spring.batch.job.enabled=false

          spring.jackson.time-zone=Asia/Seoul
          server.forward-headers-strategy=framework
          EOF

      - name: 🚨 프로덕션 배포 전 테스트
        working-directory: ./SpringBoot
        env:
          SPRING_PROFILES_ACTIVE: test
        run: |
          ./gradlew clean build --no-daemon --parallel --build-cache -x test

      - name: 테스트 결과 업로드
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-reports-${{ github.run_number }}
          path: |
            SpringBoot/build/reports/
            SpringBoot/build/test-results/
          retention-days: 7

  deploy-production:
    needs: pre-deploy-test
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 15
    if: ${{ needs.pre-deploy-test.result == 'success' }}

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: SSH 키 설정 및 배포
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

          # .env 복사 명령 제거
          # scp -i ~/.ssh/id_rsa .env ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/opt/news-deliver/

          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
            cd /opt/news-deliver
            git fetch origin
            git checkout ${{ github.ref_name }} || git checkout -b ${{ github.ref_name }} origin/${{ github.ref_name }}
            git pull origin ${{ github.ref_name }}

            docker-compose down --remove-orphans || true
            docker system prune -f || true
            docker-compose up -d --build --force-recreate
          '

      - name: 스마트 헬스체크
        run: |
          for i in {1..8}; do
            http_code=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.EC2_HOST }}/api/auth/status || echo "000")
            if [ "$http_code" = "200" ]; then
              echo "✅ 프로덕션 헬스체크 통과"
              exit 0
            fi
            sleep 20
          done
          echo "❌ 프로덕션 헬스체크 실패"
          exit 1
