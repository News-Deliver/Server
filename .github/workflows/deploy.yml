name: AWS EC2 배포

on:
  push:
    branches: [ 'feat/git' ]  # feat/git 브랜치에서만 배포
  workflow_dispatch:  # 수동 실행 가능

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: SSH 키 설정
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: EC2 서버에 배포
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
            echo "🚀 배포 시작 시간: $(date)"
            echo "📍 브랜치: ${{ github.ref_name }}"
            echo "🧪 feat/git 브랜치의 테스트 배포입니다"
          
            cd /opt/news-deliver
          
            # 현재 브랜치 확인
            echo "📋 현재 브랜치: $(git branch --show-current)"
          
            # feat/git 브랜치로 체크아웃 및 풀
            echo "📥 feat/git에서 최신 코드 가져오는 중..."
            git fetch origin
            git checkout feat/git || git checkout -b feat/git origin/feat/git
            git pull origin feat/git
          
            # 환경 변수 파일 확인
            if [ ! -f ".env" ]; then
              echo "❌ .env 파일을 찾을 수 없습니다!"
              exit 1
            fi
          
            # 기존 컨테이너 중지
            echo "🛑 기존 컨테이너 중지 중..."
            docker-compose down || true
          
            # Docker 이미지 정리
            echo "🧹 오래된 이미지 정리 중..."
            docker system prune -f
          
            # 새로운 컨테이너 시작
            echo "🔄 새 컨테이너 시작 중..."
            docker-compose up -d --build
          
            # 서비스 시작 대기
            echo "⏳ 서비스 시작 대기 중..."
            sleep 60
          
            # 서비스 상태 확인
            echo "📊 서비스 상태 확인 중..."
            docker-compose ps
          
            # Spring Boot 헬스체크
            echo "🔍 Spring Boot 헬스체크 중..."
            for i in {1..12}; do
              if curl -f http://localhost:8080/ >/dev/null 2>&1; then
                echo "✅ Spring Boot가 정상 작동 중입니다!"
                break
              fi
              echo "⏳ 시도 $i/12: Spring Boot가 아직 준비되지 않았습니다..."
              sleep 10
            done
          
            echo "🎉 테스트 배포 완료 시간: $(date)"
          '

      - name: 외부 헬스체크
        run: |
          echo "🔍 외부 헬스체크 중..."
          sleep 30
          
          # 외부에서 접근 가능한지 확인
          for i in {1..5}; do
            if curl -f http://${{ secrets.EC2_HOST }}:8080/ >/dev/null 2>&1; then
              echo "✅ 외부 헬스체크 통과!"
              echo "🔗 애플리케이션 URL: http://${{ secrets.EC2_HOST }}:8080/"
              echo "📋 API 문서: http://${{ secrets.EC2_HOST }}:8080/swagger.html"
              echo "🧪 테스트 브랜치에서 배포됨: feat/git"
              exit 0
            fi
            echo "⏳ 시도 $i/5: 외부 체크가 아직 준비되지 않았습니다..."
            sleep 10
          done
          
          echo "⚠️ 외부 헬스체크 시간 초과, 하지만 배포는 성공했을 수 있습니다"

      - name: 배포 요약
        if: always()
        run: |
          echo "## 🧪 테스트 배포 요약" >> $GITHUB_STEP_SUMMARY
          echo "- **대상 서버**: ${{ secrets.EC2_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "- **배포된 브랜치**: feat/git (테스트 전용)" >> $GITHUB_STEP_SUMMARY
          echo "- **배포 시간**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **커밋**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **애플리케이션 URL**: http://${{ secrets.EC2_HOST }}:8080/" >> $GITHUB_STEP_SUMMARY
          echo "- **API 문서**: http://${{ secrets.EC2_HOST }}:8080/swagger.html" >> $GITHUB_STEP_SUMMARY
          echo "- **⚠️ 참고**: 이것은 테스트 배포입니다. 프로덕션은 main 브랜치를 사용합니다." >> $GITHUB_STEP_SUMMARY