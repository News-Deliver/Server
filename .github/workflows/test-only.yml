name: 테스트만 수행 (배포 없음)

on:
  pull_request:
    branches: [ main, dev ]
    types: [opened, synchronize, reopened]
  push:
    branches: [ main, dev ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ci_test_password
          MYSQL_DATABASE: backendDB
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

      redis-cache:
        image: redis:7.2
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis-session1:
        image: redis:7.2
        ports:
          - 6380:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis-session2:
        image: redis:7.2
        ports:
          - 6381:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          xpack.security.transport.ssl.enabled: false
          ES_JAVA_OPTS: -Xms512m -Xmx512m
        ports:
          - 9200:9200
        options: >-
          --health-cmd="curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=10

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Gradle 패키지 캐시
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: gradlew 실행 권한 부여
        run: chmod +x SpringBoot/gradlew

      - name: 서비스 준비 완료 대기
        run: |
          echo "⏳ 서비스 시작 대기 중..."
          
          # MySQL 대기
          echo "MySQL 대기 중..."
          for i in {1..30}; do
            if mysqladmin ping -h"127.0.0.1" -P"3306" -u"root" -p"ci_test_password" --silent; then
              echo "✅ MySQL 준비 완료"
              break
            fi
            echo "MySQL이 준비되지 않음, 대기 중... ($i/30)"
            sleep 2
          done
          
          # Redis 대기  
          echo "Redis 대기 중..."
          for i in {1..30}; do
            if redis-cli -h 127.0.0.1 -p 6379 ping | grep -q PONG; then
              echo "✅ Redis 준비 완료"
              break
            fi
            echo "Redis가 준비되지 않음, 대기 중... ($i/30)"
            sleep 1
          done
          
          # Elasticsearch 대기
          echo "Elasticsearch 대기 중..."
          for i in {1..60}; do
            if curl -f http://localhost:9200/_cluster/health >/dev/null 2>&1; then
              echo "✅ Elasticsearch 준비 완료"
              break
            fi
            echo "Elasticsearch가 준비되지 않음, 대기 중... ($i/60)"
            sleep 2
          done
          
          echo "🎉 모든 서비스 준비 완료!"

      - name: 애플리케이션 빌드 및 테스트
        working-directory: ./SpringBoot
        run: ./gradlew build --no-daemon -Dspring.profiles.active=test

      - name: 테스트 결과 업로드
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports-${{ github.run_number }}
          path: |
            SpringBoot/build/reports/
            SpringBoot/build/test-results/
          retention-days: 7

      - name: 테스트 요약
        if: always()
        run: |
          echo "## 🧪 테스트 결과 (배포 없음)" >> $GITHUB_STEP_SUMMARY
          echo "- **테스트 상태**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "- **PR 번호**: #${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
            echo "- **소스 브랜치**: ${{ github.head_ref }}" >> $GITHUB_STEP_SUMMARY
            echo "- **타겟 브랜치**: ${{ github.base_ref }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **브랜치**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **Java 버전**: 17" >> $GITHUB_STEP_SUMMARY
          echo "- **서비스**: MySQL, Redis (x3), Elasticsearch" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ 이 작업은 테스트만 수행합니다 (배포 없음)" >> $GITHUB_STEP_SUMMARY