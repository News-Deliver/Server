# Auth 도메인 설명서

## 담당자 : 문준원

## 도메인 설명

Auth 도메인은 **멋쟁이 뉴스 배달부** 서비스의 사용자 인증 및 권한 관리를 담당하는 핵심 도메인입니다.
 카카오 OAuth2 소셜 로그인을 기반으로 하며, JWT 토큰을 활용한 안전한 인증 시스템을 제공합니다.

### 주요 특징
- **카카오 OAuth2 로그인**: 카카오 소셜 로그인만을 허용하여 일관된 사용자 경험 제공
- **JWT 토큰 기반 인증**: 액세스 토큰(16분)과 리프레시 토큰(24시간)을 통한 보안 강화
- **Redis 이중화**: Primary + Backup Redis를 통한 토큰 저장소의 안정성 확보
- **자동 토큰 갱신**: 리프레시 토큰을 통한 seamless한 토큰 갱신

## 기능 설명

### 1. 사용자 관리 (User Entity)
```java
// 카카오 OAuth2를 통한 사용자 정보 관리
- 카카오 ID 기반 사용자 식별
- 회원가입 시점 자동 기록
- 사용자별 고유 식별자 제공
```

### 2. 인증 정보 관리 (Auth Entity)
```java
// 카카오 리프레시 토큰 저장 및 관리
- 카카오 API 호출을 위한 리프레시 토큰 보관
- 사용자와 1:1 관계 매핑
- 토큰 만료 시 자동 갱신 지원
```

### 3. JWT 토큰 시스템

#### 3.1 토큰 생성 및 검증 (JwtTokenProvider)
- **액세스 토큰**: 16분 유효기간, API 요청 인증용
- **리프레시 토큰**: 24시간 유효기간, 토큰 갱신용
- **HMAC SHA-256**: 토큰 서명 알고리즘
- **토큰 유효성 검증**: 서명, 만료시간, 형식 검증

#### 3.2 Redis 토큰 저장소 (RedisService)
```java
// 이중화된 Redis 인스턴스 활용
Primary Redis (주 저장소) + Backup Redis (백업 저장소)
- 자동 Failover 지원
- 토큰별 만료시간 자동 관리
- 로그아웃 시 토큰 완전 삭제
```

### 4. OAuth2 로그인 플로우

#### 4.1 사용자 정보 처리 (CustomOAuth2UserService)
```java
1. 카카오 OAuth2 제공자 검증
2. 카카오 사용자 정보 추출
3. Spring Security 인증 객체 생성
4. ROLE_USER 권한 부여
```

#### 4.2 로그인 성공 처리 (OAuth2LoginSuccessHandler)
```java
1. 카카오 리프레시 토큰 추출 및 저장
2. 사용자 정보 DB 저장 (신규/기존 구분)
3. 서비스 자체 JWT 토큰 발급
4. Redis에 토큰 저장
5. 프론트엔드로 토큰 정보와 함께 리다이렉트
```

### 5. 인증 필터 시스템 (JwtAuthenticationFilter)
```java
// 모든 HTTP 요청에 대한 JWT 인증 처리
1. Authorization 헤더에서 Bearer 토큰 추출
2. JWT 토큰 유효성 검증
3. 토큰에서 사용자 정보 추출
4. SecurityContext에 인증 정보 설정
```

### 6. 카카오 API 연동 (KakaoTokenProvider)
```java
// 카카오 액세스 토큰 관리
- 저장된 리프레시 토큰으로 액세스 토큰 발급
- 카카오 API 호출을 위한 유효한 토큰 제공
- 토큰 만료 시 자동 갱신
- 토큰 유효성 검증
```

### 7. REST API 엔드포인트 (AuthController)

#### 7.1 토큰 관리
- `POST /api/auth/refresh`: JWT 토큰 갱신
- `POST /api/auth/logout`: 사용자 로그아웃 및 토큰 무효화

#### 7.2 사용자 정보
- `GET /api/auth/me`: 현재 사용자 정보 조회
- `GET /api/auth/status`: 로그인 상태 확인

### 8. 비즈니스 로직 (AuthService)
```java
// 핵심 인증 비즈니스 로직
- 사용자 조회 및 존재 여부 확인
- JWT 토큰 갱신 처리
- 로그아웃 처리 (Redis 토큰 삭제)
- 현재 사용자 정보 조회
```

### 9. 예외 처리 시스템
```java
// 체계적인 에러 코드 관리
- AUTH_ERROR_6xx: 인증 관련 예외
- 사용자 친화적 에러 메시지
- HTTP 상태 코드와 매핑
- GlobalExceptionHandler를 통한 일관된 예외 처리
```

### 10. 보안 설정 (SecurityConfig)
```java
// Spring Security 설정
- CSRF 비활성화 (JWT 사용으로 인한)
- CORS 설정
- 세션 무상태 설정 (STATELESS)
- OAuth2 로그인 설정
- JWT 필터 체인 구성
```

## 데이터 플로우

### 로그인 플로우
```
1. 사용자 → 카카오 로그인 요청
2. 카카오 → 인증 완료 후 코드 반환
3. 서버 → 카카오 토큰 교환 및 사용자 정보 획득
4. 서버 → User/Auth 테이블에 정보 저장
5. 서버 → JWT 토큰 생성 및 Redis 저장
6. 클라이언트 → 토큰 정보 수신 및 저장
```

### API 요청 플로우
```
1. 클라이언트 → Authorization 헤더에 JWT 토큰 포함하여 요청
2. JwtAuthenticationFilter → 토큰 추출 및 검증
3. 유효한 경우 → SecurityContext에 인증 정보 설정
4. 컨트롤러 → 인증된 사용자로 비즈니스 로직 처리
```

## 기술 스택
- **Spring Security**: 인증 및 권한 관리
- **OAuth2 Client**: 카카오 소셜 로그인
- **JWT (JJWT)**: 토큰 기반 인증
- **Redis**: 토큰 저장소 (이중화)
- **JPA/Hibernate**: 사용자 정보 영속성
- **Spring Boot**: 전체 프레임워크