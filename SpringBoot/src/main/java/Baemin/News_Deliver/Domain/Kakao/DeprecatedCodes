/* KakaoMessageService */

    @Value("${spring.security.oauth2.client.registration.kakao.client-id}")
    private String kakaoClientId;
    @Value("${spring.security.oauth2.client.registration.kakao.client-secret}")
    private String kakaoClientSecret;

   /**
     * 카카오 메시지 전송 메서드
     *
     * @param refreshAccessToken 유저의 리프레시 토큰
     * @param userId 유저의 고유 번호
     * @return T,F
     */
     public boolean sendKakaoMessage(String refreshAccessToken, Long userId) {

     /* 유저의 세팅 리스트 반환 */
     log.info("refreshAccessToken 발급 결과 :{}", refreshAccessToken);
     String accessToken = getKakaoUserAccessToken(refreshAccessToken, userId);
     log.info("accessToken 발급 결과:{}", accessToken);
     List<SettingDTO> settings = settingService.getAllSettingsByUserId(userId);
     boolean anySuccess = false;

     /* Setting을 순회하며 뉴스 리스트 저장&전송 */
     for (SettingDTO setting : settings) {
     List<NewsEsDocument> newsList = newsService.searchNews(
     setting.getSettingKeywords(), setting.getBlockKeywords());

     if (newsList == null || newsList.isEmpty()) {
     log.info("세팅 ID {}에 해당하는 뉴스가 없음", setting.getId());
     continue;
     }

     if (newsList.size() > 5) {
     newsList = newsList.subList(0, 5);
     }

     saveHistory(newsList, List.of(setting));
     boolean success = sendSingleKakaoMessage(accessToken, newsList);
     anySuccess = anySuccess || success;
     }

     return anySuccess;
     }

     /**
     * 사용자의 키워드에 맞는 뉴스를 검색한 후, 카카오 메시지를 전송합니다.
     *
     * @param refreshAccessToken 사용자 카카오 Refresh Token
     * @param userId 사용자 고유 ID
     * @return 메시지 전송 성공 여부 (true: 성공, false: 실패)
     */
     public boolean sendKakaoMessage(String refreshAccessToken, Long userId) {
     try {

     /**
     * 문제 정의 : 세팅 1번에 대해서만 메시지가 전송된다.
     */

     /* 유저에게 맞는 뉴스 리스트 검색*/
     String accessToken = getKakaoUserAccessToken(refreshAccessToken, userId);
     List<NewsEsDocument> newsList = getNewsEsDocumentList_Fixed(userId);
     if (newsList == null) new KakaoException(ErrorCode.NO_NEWS_DATA);;

     /* Http 요청 헤더 설정 */
     HttpHeaders headers = new HttpHeaders();
     headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
     headers.set("Authorization", "Bearer " + accessToken);

     /* 템플릿 설정(ES로 검색한 뉴스 리스트 넘겨받음) */
     Map<String, String> templateArgs = createTemplateData(newsList);

     /* JSON 문자열로 변환 */
     ObjectMapper objectMapper = new ObjectMapper();
     String templateArgsJson = objectMapper.writeValueAsString(templateArgs);

     /* 요청 파라미터 구성 */
     MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
     params.add("template_id", "122080");
     params.add("template_args", templateArgsJson);

     /* 카카오 메시지 전송 */
     HttpEntity<MultiValueMap<String, String>> entity = new HttpEntity<>(params,
     headers);
     ResponseEntity<String> response =
     restTemplate.postForEntity(KAKAO_SEND_TOME_URL, entity, String.class);
     log.info("카카오 메시지 전송 응답: {}", response.getBody());

     return response.getStatusCode() == HttpStatus.OK;

     } catch (Exception e) {
     log.error("카카오 메시지 전송 실패: ", e);
     throw new KakaoException(ErrorCode.MESSAGE_SEND_FAILED);
     }
     }

     /**
     * 사용자의 Setting 정보를 기반으로 키워드에 해당하는 뉴스를 검색하여 반환합니다.
     * 뉴스는 히스토리에 저장되며, 최대 5개까지 템플릿으로 전송됩니다.
     *
     * @param userId 사용자 고유 ID
     * @return 뉴스 리스트 {@code List<NewsEsDocument>}, 키워드가 없거나 오류 시 {@code null}
     */
     private List<NewsEsDocument> getNewsEsDocumentList(Long userId) {

     //유저 정보를 기준으로 Settig값 가져오기
     List<SettingDTO> settings = settingService.getAllSettingsByUserId(userId);

     List<String> keywords = new ArrayList<>();
     List<String> blockKeywords = new ArrayList<>();

     for (SettingDTO setting : settings) {
     log.info("셋팅값 확인용 코드 : " + setting.getSettingKeywords());
     log.info("셋팅 제외 확인용 코드 : " + setting.getBlockKeywords());

     // 키워드리스트의 null 값 체크
     if (setting.getSettingKeywords() != null) {
     keywords.add(setting.getSettingKeywords().toString());
     }

     blockKeywords.add(setting.getBlockKeywords().toString());
     }

     if (keywords.isEmpty()) {
     log.error("설정된 키워드가 없습니다.");
     throw new KakaoException(ErrorCode.SETTING_NOT_FOUND);
     }

     //키워드별 뉴스 검색
     List<NewsEsDocument> newsList = newsService.searchNews(keywords,
     blockKeywords);

     log.info("검색된 뉴스 수: {}", newsList.size());
     newsList.forEach(n -> log.info("뉴스: {} - {}", n.getPublisher(),
     n.getSummary()));

     // 검색된 뉴스를 히스토리로 보내는 코드
     if (saveHistory(newsList, settings)) return null;
     return newsList;
     }


/* KakaoNewsService */

    /**
     * 사용자의 키워드를 리스트로 묶어 뉴스 검색 메서드에 전달
     *
     * @param includeKeywords 포함 키워드
     * @param blockKeywords 제외 키워드
     * @return
     */
    public List<NewsEsDocument> searchNews(List<String> includeKeywords, List<String> blockKeywords) {
        try {

            /* 전날 기준으로 시간을 측정 */
            LocalDate yesterday = LocalDate.now().minusDays(1);

            /* 포함 키워드 쿼리 */
            Query includeKeywordQuery = Query.of(q -> q
                    .bool(b -> b
                            .should(includeKeywords.stream()
                                    .map(kw -> Query.of(q2 -> q2
                                            .multiMatch(m -> m
                                                    .query(kw)
                                                    .fields("title", "summary", "content_url", "publisher")
                                                    .type(TextQueryType.BoolPrefix)
                                            )
                                    ))
                                    .collect(Collectors.toList())
                            )
                            .minimumShouldMatch("1")
                    )
            );

            /* 제외 키워드 쿼리 */
            Query excludeKeywordQuery = Query.of(q -> q
                    .bool(b -> b
                            .should(blockKeywords.stream()
                                    .map(kw -> Query.of(q2 -> q2
                                            .multiMatch(m -> m
                                                    .query(kw)
                                                    .fields("title", "summary", "content_url", "publisher")
                                                    .type(TextQueryType.BoolPrefix)
                                            )
                                    ))
                                    .collect(Collectors.toList())
                            )
                    )
            );

            /* 날짜 필터 쿼리 */
            Query dateFilter = Query.of(q -> q
                    .range(r -> r
                            .field("published_at")
                            .gte(JsonData.of(yesterday.toString()))
                            .lte(JsonData.of(yesterday.toString()))
                            .format("yyyy-MM-dd")
                    )
            );

            /* 전체 쿼리 조합 */
            Query finalQuery = Query.of(q -> q
                    .bool(b -> b
                            .must(includeKeywordQuery)
                            .must(dateFilter)
                            .mustNot(excludeKeywordQuery)
                    )
            );

            /* 검색 요청 */
            SearchRequest request = SearchRequest.of(s -> s
                    .index("news-index-nori")
                    .query(finalQuery)
                    .size(5)
                    .sort(sort -> sort
                            .score(sc -> sc.order(co.elastic.clients.elasticsearch._types.SortOrder.Desc))
                    )
            );

            /* 검색 수행 */
            SearchResponse<NewsEsDocument> response = client.search(request, NewsEsDocument.class);

            /* 로그: 스코어 확인 */
            response.hits().hits().forEach(hit ->
                    log.info("{} | score: {}", hit.source().getTitle(), hit.score())
            );

            /* 결과 반환 */
            return response.hits().hits().stream()
                    .map(hit -> hit.source())
                    .collect(Collectors.toList());

        } catch (IOException e) {
            log.error("키워드 기반 뉴스 검색 실패: {}", e.getMessage(), e);
            return List.of();
        }
    }